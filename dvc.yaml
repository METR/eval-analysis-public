params:
  - fig_params/figs.yaml

vars:
  - fig_params/figs.yaml

stages:
  fetch_swe_bench_runs:
    cmd: >-
      python -m src.fetch_swe_bench_runs
      --annotations data/external/ensembled_annotations_public.csv
      --output-file data/external/swe_bench_runs.jsonl
    deps:
      - src/fetch_swe_bench_runs.py
    outs:
      - data/external/swe_bench_runs.jsonl
    frozen: false

  calculate_baseline_statistics:
    cmd: >-
      python -m src.calculate_baseline_statistics
      --input-file data/external/all_runs.jsonl
    deps:
      - data/external/all_runs.jsonl
      - src/calculate_baseline_statistics.py
    metrics:
      - metrics/baseline_statistics.yaml:
          cache: false

  # Wrangle

  # n-bootstrap should be 10000 in the final version
  wrangle_bootstrap_logistic:
    foreach: &foreach_logistic
      headline: ${figs.wrangle_logistic.headline}
      ga_rebench: ${figs.wrangle_logistic.ga_rebench}
      swe_bench: ${figs.wrangle_logistic.swe_bench}
      partial_scoring: ${figs.wrangle_logistic.partial_scoring}
    do:
      cmd: >-
        python -m src.wrangle.bootstrap
        --fig-name ${key}
        --runs-file data/external/${item.runs_file}.jsonl
        --output-bootstrap-horizons-file data/wrangled/bootstrap/${key}.csv
        --n-bootstrap 10000
      deps:
        - src/wrangle/bootstrap.py
        - src/utils/logistic.py
        - data/external/${item.runs_file}.jsonl
      params:
        - fig_params/figs.yaml:
            - figs.wrangle_logistic.${key}
      outs:
        - data/wrangled/bootstrap/${key}.csv
      desc: Compute bootstrapped logistic regression results

  wrangle_logistic_regression:
    foreach: *foreach_logistic
    do:
      cmd: >-
        python -m src.wrangle.logistic
        --fig-name ${key}
        --runs-file data/external/${item.runs_file}.jsonl
        --output-logistic-fits-file data/wrangled/logistic_fits/${key}.csv
        --release-dates data/external/release_dates.yaml
        --bootstrap-file data/wrangled/bootstrap/${key}.csv
      deps:
        - data/external/${item.runs_file}.jsonl
        - data/external/release_dates.yaml
        - data/wrangled/bootstrap/${key}.csv
        - src/wrangle/logistic.py
        - src/utils/logistic.py
      params:
        - fig_params/figs.yaml:
            - figs.wrangle_logistic.${key}
      outs:
        - data/wrangled/logistic_fits/${key}.csv
      desc: Fit logistic curves for each agent, load bootstrap results from bootstrap stage, and add binned weighted success rate data.

  wrangle_cost:
    cmd: >-
      python -m src.wrangle.cost
      --runs-file data/external/all_runs.jsonl
    deps:
      - data/external/all_runs.jsonl
      - data/external/release_dates.yaml
      - src/wrangle/cost.py
    outs:
      - data/processed/wrangled/costs/cost_info.csv
    metrics:
      - metrics/costs/savings_info.csv:
          cache: false
      - metrics/costs/savings_non_bucketed_info.csv:
          cache: false

  ga_swebench_comparison_table:
    cmd: >-
      python -m src.ga_swebench_comparison_table
      --headline-fits-file data/wrangled/logistic_fits/headline.csv
      --swebench-fits-file data/wrangled/logistic_fits/swe_bench.csv
      --output-table-file data/processed/ga_swebench_comparison_table.tex
    deps:
      - data/wrangled/logistic_fits/headline.csv
      - data/wrangled/logistic_fits/swe_bench.csv
      - src/ga_swebench_comparison_table.py
    outs:
      - data/processed/ga_swebench_comparison_table.tex:
          cache: false

  # Plot

  plot_bar_chart_weighted_scores:
    matrix:
      fig_name: [headline]
    cmd: >-
      python -m src.plot.bar_chart_weighted_scores
      --fig-name ${item.fig_name}
      --metrics-file data/wrangled/logistic_fits/${item.fig_name}.csv
      --release-dates data/external/release_dates.yaml
      --output-file plots/bar_chart_weighted_scores/${item.fig_name}.${plot_format}
      --log-level ${log_level}
    deps:
      - src/plot/bar_chart_weighted_scores.py
      - src/utils/plots.py
      - data/external/release_dates.yaml
      - data/wrangled/logistic_fits/${item.fig_name}.csv
    params:
      - log_level
      - plot_format
      - plots
      - weighting
      - fig_params/figs.yaml:
          - figs.plot_bar_chart_weighted_scores.${item.fig_name}
    plots:
      - plots/bar_chart_weighted_scores/${item.fig_name}.${plot_format}
    desc: Generate bar chart of weighted scores.

  # plot_bar_chart:
  #   matrix:
  #     weighting: ["invsqrt_task_weight"]
  #     boot_set: ["None"]
  #     pass_at_k_sampling: ["None"]
  #     regularization: [0.1]
  #   cmd: >-
  #     python -m src.plot.bar_chart
  #     --metrics-file data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
  #     --output-file plots/bar_chart/${item.weighting}.${plot_format}
  #     --log-level ${log_level}
  #     --weighting ${item.weighting}
  #     --boot-set ${item.boot_set}
  #     --pass-at-k-sampling ${item.pass_at_k_sampling}
  #     --params params.yaml:plots
  #   deps:
  #     - data/wrangled/logistic_regression_${item.weighting}_${item.regularization}_ftr.csv
  #     - src/plot/bar_chart.py
  #     - src/utils/plots.py
  #   params:
  #     - plots
  #     - log_level
  #     - plot_format
  #   plots:
  #     - plots/bar_chart/${item.weighting}.${plot_format}
  #   desc: Generate bar chart of agent horizon.

  plot_logistic_regression:
    foreach:
      double_line_all_data_retrodict_excluding_swaa: ${figs.plot_logistic_regression.double_line_all_data_retrodict_excluding_swaa}
      p80: ${figs.plot_logistic_regression.p80}
      single_line_2023_ga_rebench: ${figs.plot_logistic_regression.single_line_2023_ga_rebench}
      swe_bench: ${figs.plot_logistic_regression.swe_bench}
      partial_scoring: ${figs.plot_logistic_regression.partial_scoring}
      all_models: ${figs.plot_logistic_regression.all_models}
      double_line_2024_trendline: ${figs.plot_logistic_regression.double_line_2024_trendline}
    do:
      cmd: >-
        python -m src.plot.logistic
        --input-file data/wrangled/logistic_fits/${item.logistic_file}.csv
        --runs-file data/external/${item.runs_file}.jsonl
        --release-dates data/external/release_dates.yaml
        --output-file plots/logistic/${key}.${plot_format}
        --log-level ${log_level}
        --script-parameter-group ${key}
      deps:
        - data/external/${item.runs_file}.jsonl
        - data/wrangled/logistic_fits/${item.logistic_file}.csv
        - matplotlibrc
        - src/plot/logistic.py
        - src/utils/plots.py
      params:
        - log_level
        - plot_format
        - plots
        - fig_params/figs.yaml:
            - figs.plot_logistic_regression.${key}
      # plots:
      #   - plots/logistic/${key}.${plot_format}
      outs:
        - plots/logistic/${key}.${plot_format}:
            persist: true
      desc: Plot showing horizon growth over time.

  plot_horizon_alternative_fits:
    foreach: ${figs.plot_horizon_alternative_fits}
    do:
      cmd: >-
        python -m src.plot.logistic_alternative_fits
        --input-file data/wrangled/logistic_fits/${item.logistic_file}.csv
        --output-file plots/horizon_${key}.${plot_format}
        --runs-file data/external/${item.runs_file}.jsonl
        --release-dates data/external/release_dates.yaml
        --log-level ${log_level}
        --script-parameter-group ${key}
      deps:
        - data/external/${item.runs_file}.jsonl
        - data/wrangled/logistic_fits/${item.logistic_file}.csv
        - matplotlibrc
        - src/plot/logistic.py
        - src/plot/logistic_alternative_fits.py
        - src/utils/plots.py
      params:
        - log_level
        - plot_format
        - plots
        - fig_params/figs.yaml:
            - figs.plot_horizon_alternative_fits.${key}
      outs:
        - plots/horizon_${key}.${plot_format}
      desc: Plot showing alternative fits (linear, exponential, hyperbolic) to the horizon growth curve.

  plot_multiverse_boxplot:
    cmd: >-
      python -m src.plot.multiverse_boxplot
      --records-file data/wrangled/multiverse/records.json
      --output-file plots/multiverse/boxplot.${plot_format}
      --output-metrics-file metrics/multiverse_boxplot.yaml
      --log-level ${log_level}
    deps:
      - src/plot/multiverse_boxplot.py
      - src/utils/plots.py
      - data/wrangled/multiverse/records.json
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - fig_params/figs.yaml:
          - figs.plot_multiverse_boxplot
    plots:
      - plots/multiverse/boxplot.${plot_format}
      - plots/multiverse/boxplot_total_box.${plot_format}
      - plots/multiverse/boxplot_total_violin.${plot_format}
    metrics:
      - metrics/multiverse_boxplot.yaml:
          cache: false
    desc: Horizontal boxplots tracking various sources of uncertainty.

  wrangle_multiverse_boxplot:
    cmd: >-
      python -m src.wrangle.multiverse_boxplot
      --runs-file data/external/all_runs.jsonl
      --logistic-fits-file data/wrangled/logistic_fits/headline.csv
      --release-dates-file data/external/release_dates.yaml
      --output-records-file data/wrangled/multiverse/records.json
      --log-level ${log_level}
      --seed 42
    deps:
      - src/wrangle/multiverse_boxplot.py
      - src/plot/logistic.py
      - src/wrangle/bootstrap.py
      - src/wrangle/logistic.py
      - data/external/all_runs.jsonl
      - data/external/release_dates.yaml
      - data/wrangled/logistic_fits/headline.csv
    params:
      - log_level
      - fig_params/figs.yaml:
          - figs.plot_multiverse_boxplot
    outs:
      - data/wrangled/multiverse/records.json
    desc: Generate multiverse boxplot data for uncertainty analysis.

  plot_individual_histograms:
    foreach: ${figs.plot_individual_histograms}
    do:
      cmd: >-
        python -m src.plot.individual_histograms
        --all-runs-file data/external/all_runs.jsonl
        --output-file plots/individual_histograms/${key}/histograms.${plot_format}
        --plot-format ${plot_format}
        --log-level ${log_level}
        --script-parameter-group ${key}
        --params-file "params.yaml"
      deps:
        - ${item.logistic_file}
        - data/external/all_runs.jsonl
        - matplotlibrc
        - src/plot/individual_histograms.py
        - src/utils/plots.py
      params:
        - log_level
        - plot_format
        - plots
        - fig_params/figs.yaml:
            - figs.plot_individual_histograms.${key}
      # plots:
      #   - plots/individual_histograms/${key}/histograms.${plot_format}
      outs:
        - plots/individual_histograms/${key}/histograms.${plot_format}:
            persist: true
      desc: Logistic success curve + bars for each agent.

  plot_individual_binned_residuals:
    foreach:
      default: ${figs.plot_individual_histograms.default}
    do:
      cmd: >-
        python -m src.plot.individual_binned_residuals
        --all-runs-file data/external/all_runs.jsonl
        --output-file plots/individual_histograms/${key}/binned_residuals.${plot_format}
        --plot-format ${plot_format}
        --log-level ${log_level}
        --script-parameter-group ${key}
        --params-file "params.yaml"
      deps:
        - ${item.logistic_file}
        - data/external/all_runs.jsonl
        - matplotlibrc
        - src/plot/individual_binned_residuals.py
        - src/utils/plots.py
      params:
        - log_level
        - plot_format
        - plots
        - fig_params/figs.yaml:
            - figs.plot_individual_histograms.${key}
      plots:
        - plots/individual_histograms/${key}/binned_residuals.${plot_format}
      desc: Plot showing residuals of the logistic success curves.

  plot_logistic_individual:
    matrix:
      show_p50: [true, false]
    cmd: >-
      python -m src.plot.logistic_individual
      --input-file data/wrangled/logistic_fits/headline.csv
      --output-file plots/logistic_individual/p50_${item.show_p50}.${plot_format}
      --log-level ${log_level}
      --show-p50 ${item.show_p50}
    deps:
      - src/plot/logistic_individual.py
      - data/wrangled/logistic_fits/headline.csv
      - src/utils/logistic.py
      - src/utils/plots.py
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/logistic_individual/p50_${item.show_p50}.${plot_format}
    desc: Plot showing the logistic success curve for a single agent.

  plot_bootstrap_ci:
    matrix:
      fig_name: [headline, twitter_headline]
      y_scale: [log, linear]
    cmd: >-
      python -m src.plot.bootstrap_ci
      --fig-name ${item.fig_name}
      --input-file data/wrangled/bootstrap/headline.csv
      --agent-summaries-file data/wrangled/logistic_fits/headline.csv
      --release-dates data/external/release_dates.yaml
      --output-file plots/bootstrap/${item.fig_name}-${item.y_scale}.${plot_format}
      --log-level ${log_level}
      --y-scale ${item.y_scale}
    deps:
      - src/plot/bootstrap_ci.py
      - src/plot/logistic.py # dependency on plot_trendline
      - data/wrangled/bootstrap/headline.csv
      - data/wrangled/logistic_fits/headline.csv
      - data/external/release_dates.yaml
      - matplotlibrc
    params:
      - log_level
      - plot_format
      - plots
      - fig_params/figs.yaml:
          - figs.plot_logistic_regression.${item.fig_name}
    plots:
      - plots/bootstrap/${item.fig_name}-${item.y_scale}.${plot_format}
    desc: Generate plot of bootstrap confidence intervals

  plot_cost:
    cmd: >-
      python -m src.plot.cost
      --savings-info-file metrics/costs/savings_info.csv
      --savings-non-bucketed-info-file metrics/costs/savings_non_bucketed_info.csv
      --release-dates data/external/release_dates.yaml
    deps:
      - metrics/costs/savings_info.csv
      - metrics/costs/savings_non_bucketed_info.csv
      - data/external/release_dates.yaml
      - src/plot/cost.py
      - src/utils/plots.py
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/cost/bucketed.png
      - plots/cost/non_bucketed.png
      - plots/cost/agent_grid.png
      - plots/cost/ratio_histograms.png
      - plots/cost/ratio_histogram_overall.png
      - plots/cost/ratio_vs_length.png
      - plots/cost/ratio_vs_length_swarm.png
      - plots/cost/time_histograms.png

  plot_task_distribution:
    cmd: >-
      python -m src.plot.task_distribution
      --runs-file data/external/all_runs.jsonl
      --output-file plots/task_distribution.${plot_format}
    deps:
      - data/external/all_runs.jsonl
      - src/plot/task_distribution.py
    params:
      - log_level
      - plot_format
      - plots
    plots:
      - plots/task_distribution.${plot_format}
    desc: Plot showing the distribution of tasks by difficulty.

  plot_success_rates:
    cmd: >-
      python src/plot/success_rates.py
      --runs-file data/external/all_runs.jsonl
      --output-plots-dir plots/success_rates
      --output-data-dir data/wrangled/success_rates
      --params-file params.yaml
      --exclude-agent "Claude 3 Opus"
      --exclude-agent "GPT-4 0125"
      --exclude-agent "GPT-4 Turbo"
    deps:
      - data/external/all_runs.jsonl
      - src/plot/success_rates.py
    outs:
      - plots/success_rates/family_success_ordered_pivot.png
      - plots/success_rates/task_success_ordered_pivot.png
      - plots/success_rates/model_success_rate_vs_human_completion_time.png
      - data/wrangled/success_rates/family_success_ordered_pivot.csv
      - data/wrangled/success_rates/task_success_ordered_pivot.csv
    desc: Plot showing the success rate of models vs. human completion time. + pivot tables

  plot_success_correlations:
    cmd: >-
      python src/plot/success_correlations.py
      --runs-file data/external/all_runs.jsonl
      --release-dates data/external/release_dates.yaml
      --logistic-file data/wrangled/logistic_fits/headline.csv
      --output-plots-dir plots/success_correlations
      --output-data-dir data/wrangled/success_correlations
      --exclude-agent "Claude 3 Opus"
      --exclude-agent "GPT-4 0125"
      --exclude-agent "GPT-4 Turbo"
    desc: Plot showing the correlations between success rates of models.
    deps:
      - data/external/all_runs.jsonl
      - data/external/release_dates.yaml
      - data/wrangled/logistic_fits/headline.csv
      - src/plot/success_correlations.py
    outs:
      - data/wrangled/success_correlations/excess_success_rates.csv
      - plots/success_correlations/excess_success_rates_correlations.png
      - data/wrangled/success_correlations/fractional_excess_success_rates.csv
      - plots/success_correlations/fractional_excess_success_rates_correlations.png
      - data/wrangled/success_correlations/observed_success_rates.csv
      - plots/success_correlations/observed_success_rates_correlations.png

  plot_messiness:
    cmd: >-
      python src/plot/messiness.py
      --runs-file data/external/all_runs.jsonl
      --messiness-file data/external/messiness.csv
      --messiness-tasks-file data/external/messiness_tasks.csv
      --output-plots-dir plots/messiness
      --output-data-dir data/metrics/messiness
      --exclude-agent "Claude 3 Opus"
      --exclude-agent "GPT-4 0125"
      --exclude-agent "GPT-4 Turbo"
    desc: success rate vs messiness controlling for time (and 2x3 plot)
    deps:
      - data/external/all_runs.jsonl
      - data/external/messiness.csv
      - data/external/messiness_tasks.csv
      - src/plot/messiness.py
    outs:
      - data/metrics/messiness/analysis_results.txt
      - plots/messiness/logistic_heatmap_expanded_combined_alpha_0.010.png
      - plots/messiness/messiness_effect_expanded_combined_alpha_0.010.png

  plot_success_trend_by_messiness_and_length:
    matrix:
      messiness_quantile_boundary: [0.50, 0.75]
    cmd: >-
      python src/plot/success_trend_by_messiness_and_length.py
      --runs-file data/external/all_runs.jsonl
      --release-dates data/external/release_dates.yaml
      --messiness-file data/external/messiness.csv
      --messiness-tasks-file data/external/messiness_tasks.csv
      --output-file plots/messiness/success_trend_by_messiness_and_length_with_boundary_${item.messiness_quantile_boundary}.png
      --messiness-quantile-boundary ${item.messiness_quantile_boundary}
      --params-file params.yaml
      --exclude-agent "Claude 3 Opus"
      --exclude-agent "GPT-4 0125"
      --exclude-agent "GPT-4 Turbo"
      --exclude-agent "davinci-002 (GPT-3)"
      --exclude-agent "GPT-2"
    desc: Plot showing success rate over time by messiness and length
    deps:
      - data/external/all_runs.jsonl
      - data/external/release_dates.yaml
      - data/external/messiness.csv
      - params.yaml
      - src/plot/success_trend_by_messiness_and_length.py
    outs:
      - plots/messiness/success_trend_by_messiness_and_length_with_boundary_${item.messiness_quantile_boundary}.png

  plot_success_trend_by_messiness:
    matrix:
      messiness_quantile_boundary: [0.50]
    cmd: >-
      python src/plot/success_trend_by_messiness.py
      --runs-file data/external/all_runs.jsonl
      --release-dates data/external/release_dates.yaml
      --messiness-file data/external/messiness.csv
      --messiness-tasks-file data/external/messiness_tasks.csv
      --output-file plots/messiness/success_trend_by_messiness_with_boundary_${item.messiness_quantile_boundary}.png
      --messiness-quantile-boundary ${item.messiness_quantile_boundary}
      --params-file params.yaml
      --exclude-agent "Claude 3 Opus"
      --exclude-agent "GPT-4 0125"
      --exclude-agent "GPT-4 Turbo"
      --exclude-agent "davinci-002 (GPT-3)"
      --exclude-agent "GPT-2"
    desc: Plot showing success rate over time by messiness
    deps:
      - data/external/all_runs.jsonl
      - data/external/release_dates.yaml
      - data/external/messiness.csv
      - src/plot/success_trend_by_messiness.py
    outs:
      - plots/messiness/success_trend_by_messiness_with_boundary_${item.messiness_quantile_boundary}.png

  generate_model_task_table:
    cmd: >-
      python src/plot/generate_model_task_table.py
      --input-file data/external/all_runs.jsonl
      --output-file plots/model_task_table.tex
    deps:
      - src/plot/generate_model_task_table.py
      - data/external/all_runs.jsonl
    params:
      - fig_params/figs.yaml:
          - figs.generate_model_task_table
    outs:
      - plots/model_task_table.tex
    desc: Generate a LaTeX table showing average score_binarized by model and task source.
